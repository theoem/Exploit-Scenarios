# Copyright 2015 gRPC authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""The Python implementation of the GRPC helloworld.Greeter client."""

from __future__ import print_function
import logging

import grpc
import argparse

import helloworld_pb2
import helloworld_pb2_grpc


def run(args):

    with grpc.insecure_channel('192.168.8.111:50051') as channel:
        stub = helloworld_pb2_grpc.GreeterStub(channel)
        
        if (args.browser):
            response = stub.Browser(helloworld_pb2.HelloRequest(name='you'))
            print("Greeter client received: " + response.message)
        if (args.sip):
            response = stub.Sip(helloworld_pb2.HelloRequest(name='you'))
            print("Greeter client received: " + response.message)
        if (args.fileformat):
            response = stub.FileFormat(helloworld_pb2.HelloRequest(name='you'))
            print("Greeter client received: " + response.message)
        if (args.imap):
            response = stub.Imap(helloworld_pb2.HelloRequest(name='you'))
            print("Greeter client received: " + response.message)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Script selection.')
    parser.add_argument("-b", '--browser', action="store_true", help="Select browser script")
    parser.add_argument("-s", '--sip', action="store_true", help="Select SIP script")
    parser.add_argument("-f", '--fileformat', action="store_true", help="Select fileformat script")
    parser.add_argument("-i", '--imap', action="store_true", help="Select IMAP script")
    
    args = parser.parse_args()
    
    logging.basicConfig()
    run(args)