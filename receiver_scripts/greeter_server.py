# Copyright 2015 gRPC authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""The Python implementation of the GRPC helloworld.Greeter server."""

from concurrent import futures
import logging

from concurrent import futures
import logging
import grpc
import subprocess
import webbrowser
import os
from time import sleep
import threading
import win32serviceutil

import helloworld_pb2
import helloworld_pb2_grpc

# Edit to match the path of sipXphone.bat
sip_URI = r"C:\Program Files (x86)\SIPfoundry\sipXphone\sipXphone.bat"

# Edit to match the path of coolpdf.exe
coolpdf_URI = r"C:\Users\admin\Desktop\coolpdf.exe"
# Edit to match the path of 4500.bin
file_URI = r"C:\Users\admin\Desktop\4500.bin"

# Edit to match browser URL
browser_URL = "http://192.168.8.110:4449/ataka"


class Greeter(helloworld_pb2_grpc.GreeterServicer):

    def Browser(self, request, context):
        sleep(15)
        print("Running browser script")
        os.system("taskkill /im firefox.exe /f")
        sleep(3)
        webbrowser.open_new_tab(browser_URL)
            
        return helloworld_pb2.HelloReply(message='Browser script finished')
        
    def Sip(self, request, context):
        print("Running SIP script")
        subprocess.run(["taskkill", "/F", "/T", "/IM", "javaw.exe"])
        sleep(3)
        subprocess.Popen([sip_URI])
        
        return helloworld_pb2.HelloReply(message='SIP script finished')

    def FileFormat(self, request, context):
        print("Running fileformat script")
        subprocess.run(["taskkill", "/F", "/T", "/IM", "coolpdf.exe"])
        sleep(3)
        subprocess.Popen([coolpdf_URI,  file_URI])
            
        return helloworld_pb2.HelloReply(message='FileFormat script finished')
            
    def Imap(self, request, context):
        print("Running IMAP script")
        if win32serviceutil.QueryServiceStatus("IMAP4A")[1] != 4:
            win32serviceutil.StartService("IMAP4A")
            
        sleep(3)
        return helloworld_pb2.HelloReply(message='IMAP script finished')


def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    helloworld_pb2_grpc.add_GreeterServicer_to_server(Greeter(), server)
    server.add_insecure_port('[::]:50051')
    server.start()
    server.wait_for_termination()


if __name__ == '__main__':
    logging.basicConfig()
    serve()
